<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.ssafy.tong.chat.dao.ChatDao">
     <!-- 채팅방 목록 조회 -->
    <select id="findChatRoomsByUserId" parameterType="string" resultType="ChatRoom">
    SELECT DISTINCT
        m.matching_id as matchingId,
        m.user_id as userId,
        m.expert_user_id as expertUserId,
        CASE 
            WHEN m.user_id = #{userId} THEN e_user.name
            ELSE u_user.name
        END as partnerName,
        (
            SELECT content 
            FROM user_expert_chat 
            WHERE matching_id = m.matching_id 
            ORDER BY sent_at DESC 
            LIMIT 1
        ) as lastMessage,
        (
            SELECT DATE_FORMAT(sent_at, '%Y-%m-%d %H:%i') 
            FROM user_expert_chat 
            WHERE matching_id = m.matching_id 
            ORDER BY sent_at DESC 
            LIMIT 1
        ) as lastMessageTime
    FROM matching m
    LEFT JOIN user u_user ON m.user_id = u_user.user_id
    LEFT JOIN user e_user ON m.expert_user_id = e_user.user_id
    WHERE m.user_id = #{userId} 
       OR m.expert_user_id = #{userId}
    ORDER BY 
        CASE 
            WHEN lastMessageTime IS NULL THEN 1 
            ELSE 0 
        END,
        lastMessageTime DESC
</select>


    <!-- 채팅 내역 조회 -->
    <select id="findChatHistoryByMatchingId" parameterType="long" resultType="com.ssafy.tong.chat.model.ChatMessage">
        SELECT 
            chat_id as chatId,
            matching_id as matchingId,
            sender_id as senderId,
            content,
            sent_at as sentAt,
            is_read as isRead
        FROM user_expert_chat
        WHERE matching_id = #{matchingId}
        ORDER BY sent_at ASC
    </select>

    <!-- 메시지 저장 -->
    <insert id="saveMessage" parameterType="com.ssafy.tong.chat.model.ChatMessage">
        INSERT INTO user_expert_chat (
            matching_id,
            sender_id,
            content,
            sent_at,
            is_read
        ) VALUES (
            #{matchingId},
            #{senderId},
            #{content},
            NOW(),
            'X'
        )
    </insert>

    <!-- 메시지 읽음 상태 업데이트 -->
    <update id="updateMessageReadStatus" parameterType="long">
        UPDATE user_expert_chat 
        SET is_read = 'O' 
        WHERE chat_id = #{chatId}
    </update>

    <!-- 모든 메시지 읽음 상태 업데이트 -->
    <update id="updateAllMessagesAsRead" parameterType="long">
        UPDATE user_expert_chat 
        SET is_read = 'O' 
        WHERE matching_id = #{matchingId}
        AND is_read = 'X'
    </update>

    <!-- 읽지 않은 메시지 수 조회 -->
    <select id="getUnreadMessageCount" resultType="int">
        SELECT COUNT(*)
        FROM user_expert_chat
        WHERE matching_id = #{matchingId}
        AND sender_id != #{userId}
        AND is_read = 'X'
    </select>
</mapper>